{
  "stats": {
    "suites": 2,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-12T06:24:17.976Z",
    "end": "2022-08-12T06:24:18.052Z",
    "duration": 76,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e283233a-add1-4a25-8d37-ad6be6c0dbc6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "77d3f273-4c57-4829-96e7-28cb1762a6bb",
          "title": "Search user for API Test",
          "fullFile": "/Users/firnasholihuda/Documents/Mini Bootcamp QA Automation/task-week3/testcases/search-user.js",
          "file": "/testcases/search-user.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Search user for API Test\"",
              "fullTitle": "Search user for API Test \"before all\" hook in \"Search user for API Test\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before hooks\");\nlet response = await api.putUser(requestBody);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "e4e542db-49a2-4ab1-acff-1aa9140661d0",
              "parentUUID": "77d3f273-4c57-4829-96e7-28cb1762a6bb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Search user with valid id",
              "fullTitle": "Search user for API Test Search user with valid id",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = '2ed60d6e-1534-4f67-8a26-1a06ed892092';\nlet response = await api.getUser(idUser);\n\nexpect(response.status).to.equal(200);\nconsole.log(idUser);\nexpect(response.body).has.jsonSchema(jsonSchema);\n//expect(response.body.data).contains.something.like({\"id\": 'f2878d40-ca76-4397-a5bb-a8820e8cfb5d'});",
              "err": {},
              "uuid": "d7f494d8-00fd-4b34-9cab-385e94a3632e",
              "parentUUID": "77d3f273-4c57-4829-96e7-28cb1762a6bb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Search user with invalid id",
              "fullTitle": "Search user for API Test Search user with invalid id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = 'wrong-id';\nlet response = await api.getUser2(idUser);\n\nexpect(response.status).to.equal(404);\nconsole.log(idUser);\nexpect(response.body).to.be.contain({message: 'user not found'});\nexpect(response.body).to.be.contain({errorCode: 'ER-01'});\n//expect(response.body).has.jsonSchema(jsonSchema);\n//expect(response.body.data).contains.something.like({\"id\": 'f2878d40-ca76-4397-a5bb-a8820e8cfb5d'});",
              "err": {},
              "uuid": "a4c4019b-83a8-4ed3-afe7-714e09ecf191",
              "parentUUID": "77d3f273-4c57-4829-96e7-28cb1762a6bb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d7f494d8-00fd-4b34-9cab-385e94a3632e",
            "a4c4019b-83a8-4ed3-afe7-714e09ecf191"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a3c53c0f-f2cc-4411-80d2-f2daf6123bac",
          "title": "Update user for API Test",
          "fullFile": "/Users/firnasholihuda/Documents/Mini Bootcamp QA Automation/task-week3/testcases/update-user.js",
          "file": "/testcases/update-user.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create user",
              "fullTitle": "Update user for API Test Create user",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = 'Firnan';\n\n// const dataRequest = data.dataRequestAPIPostUser(namaYgMauDiCari);\nlet response =  await api.postUser(requestBody5);\nlet bodyData = response.body;\nexpect(response.status).to.equal(200);\nexpect(bodyData.firstName).to.equal(name);\nexpect(bodyData.id).not.to.be.null;\n\n// Additional Assertion\n// response = await api.getUser(name);\n// bodyData = response.body;\n// expect(response.status).to.equal(200);\nfor(let index = 0; index < bodyData.data; index += 1) {\n    expect(bodyData.data[index].firstName.toLowerCase()).to.equal(name.toLowerCase());\n}",
              "err": {},
              "uuid": "5007b21b-4575-40b4-b6df-e961e5439a37",
              "parentUUID": "a3c53c0f-f2cc-4411-80d2-f2daf6123bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Ocuppation and Nationality user with valid data",
              "fullTitle": "Update user for API Test Update Ocuppation and Nationality user with valid data",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = '2ed60d6e-1534-4f67-8a26-1a06ed892092';\nlet response = await api.putUser(requestBody);\nlet bodyData = response.body;\nexpect(response.status).to.equal(200);\nexpect(bodyData.id).to.equal(idUser);\nexpect(bodyData.id).not.to.be.null;\n// console.log(response.body['occupation']);\n// console.log(response.body['nationality']);\nexpect(response.body).to.be.contain({occupation: 'QA Engineer'});\nexpect(response.body).to.be.contain({nationality: 'Indonesia'});\nexpect(response.body).has.jsonSchema(jsonSchema);\nfor(let index = 0; index < bodyData.data; index += 1) {\n    expect(bodyData.data[index].id.toLowerCase()).to.equal(idUser.toLowerCase());\n}",
              "err": {},
              "uuid": "c6b5a269-0d07-4aae-b778-018e6c534ff9",
              "parentUUID": "a3c53c0f-f2cc-4411-80d2-f2daf6123bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Age into 0 will return 400",
              "fullTitle": "Update user for API Test Update Age into 0 will return 400",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = '2ed60d6e-1534-4f67-8a26-1a06ed892092';\nlet response = await api.putUser(requestBody2);\nlet bodyData = response.body;\nexpect(response.status).to.equal(400);\n// console.log(response.body['message']);\n// console.log(response.body['errorCode']);\nexpect(response.body).to.be.contain({message: 'you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender'});\nexpect(response.body).to.be.contain({errorCode: 'ER-03'});\nexpect(response.body).has.jsonSchema(jsonSchema2);\nfor(let index = 0; index < bodyData.data; index += 1) {\n    expect(bodyData.data[index]).to.equal(idUser);\n}",
              "err": {},
              "uuid": "681f6774-956d-45fa-8c52-672d402f68c4",
              "parentUUID": "a3c53c0f-f2cc-4411-80d2-f2daf6123bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Hobbies into empty array will return 400",
              "fullTitle": "Update user for API Test Update Hobbies into empty array will return 400",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = '2ed60d6e-1534-4f67-8a26-1a06ed892092';\nlet response = await api.putUser(requestBody3);\nlet bodyData = response.body;\nexpect(response.status).to.equal(400);\nexpect(response.body).to.be.contain({message: 'you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender'});\nexpect(response.body).to.be.contain({errorCode: 'ER-03'});\nexpect(response.body).has.jsonSchema(jsonSchema2);\nfor(let index = 0; index < bodyData.data; index += 1) {\n    expect(bodyData.data[index]).to.equal(idUser);\n}",
              "err": {},
              "uuid": "49462b15-eb88-423b-b8f6-d7c6ac85345a",
              "parentUUID": "a3c53c0f-f2cc-4411-80d2-f2daf6123bac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update ID into null will return 404",
              "fullTitle": "Update user for API Test Update ID into null will return 404",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = '2ed60d6e-1534-4f67-8a26-1a06ed892092';\nlet response = await api.putUser(requestBody4);\nlet bodyData = response.body;\nexpect(response.status).to.equal(404);\nexpect(response.body).to.be.contain({message: 'user not found'});\nexpect(response.body).to.be.contain({errorCode: 'ER-01'});\nexpect(response.body).has.jsonSchema(jsonSchema2);\nfor(let index = 0; index < bodyData.data; index += 1) {\n    expect(bodyData.data[index]).to.equal(idUser);\n}",
              "err": {},
              "uuid": "216f9ca3-1a49-45b1-a9ce-95ee0e652dc9",
              "parentUUID": "a3c53c0f-f2cc-4411-80d2-f2daf6123bac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5007b21b-4575-40b4-b6df-e961e5439a37",
            "c6b5a269-0d07-4aae-b778-018e6c534ff9",
            "681f6774-956d-45fa-8c52-672d402f68c4",
            "49462b15-eb88-423b-b8f6-d7c6ac85345a",
            "216f9ca3-1a49-45b1-a9ce-95ee0e652dc9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}