{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-07T05:02:37.782Z",
    "end": "2022-08-07T05:02:37.872Z",
    "duration": 90,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca28ecbd-d99a-4980-8dd2-490070a62220",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fa931c3e-efd2-4625-9889-ad298923e041",
          "title": "Search users API Test",
          "fullFile": "/Users/firnasholihuda/Documents/Mini Bootcamp QA Automation/belajar-api-fazztrack/testcases/search-user.js",
          "file": "/testcases/search-user.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Search users API Test\"",
              "fullTitle": "Search users API Test \"before all\" hook in \"Search users API Test\"",
              "timedOut": false,
              "duration": 46,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before hooks\");\nlet response = await api.postUser(requestBody);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "27ffcba7-2991-464f-8932-44d3563b2489",
              "parentUUID": "fa931c3e-efd2-4625-9889-ad298923e041",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Search users API Test\"",
              "fullTitle": "Search users API Test \"before each\" hook in \"Search users API Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before each hooks\");",
              "err": {},
              "uuid": "b4aea674-1aa4-465a-a139-a166fd118f6e",
              "parentUUID": "fa931c3e-efd2-4625-9889-ad298923e041",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Search users API Test\"",
              "fullTitle": "Search users API Test \"after all\" hook in \"Search users API Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"after hooks\");",
              "err": {},
              "uuid": "4921b64d-0448-4170-a70c-258cd4a547d8",
              "parentUUID": "fa931c3e-efd2-4625-9889-ad298923e041",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Search users API Test\"",
              "fullTitle": "Search users API Test \"after each\" hook in \"Search users API Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"after each hooks\");",
              "err": {},
              "uuid": "9f718661-a952-42ff-8e8c-3972ac8803d2",
              "parentUUID": "fa931c3e-efd2-4625-9889-ad298923e041",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@search-user-api] Seach user with valid keyword",
              "fullTitle": "Search users API Test [@search-user-api] Seach user with valid keyword",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let keyword = 'Firnan';\nlet response = await api.getUser(keyword);\nexpect(response.status).to.equal(200);\nexpect(response.body.data).contains.something.like({firstName: 'Firnan'});\nexpect(response.body).has.jsonSchema(jsonSchema);",
              "err": {},
              "uuid": "7c8daa6b-a13e-44f4-a4ed-0d7964f2ad96",
              "parentUUID": "fa931c3e-efd2-4625-9889-ad298923e041",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c8daa6b-a13e-44f4-a4ed-0d7964f2ad96"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f511ab4e-b37d-41ba-8d8d-a93388f78f8c",
          "title": "[@createuser] Create user API Test",
          "fullFile": "/Users/firnasholihuda/Documents/Mini Bootcamp QA Automation/belajar-api-fazztrack/testcases/test.js",
          "file": "/testcases/test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "[@search-user]Verify get users API will return when using valid keyword",
              "fullTitle": "[@createuser] Create user API Test [@search-user]Verify get users API will return when using valid keyword",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// starting for scripting\nlet namaYgMauDiCari = 'Firnan';\nlet response = await api.getUser(namaYgMauDiCari);\nlet bodyData = response.body;\nexpect(response.status).to.equal(200);\nconsole.log(bodyData.data);\nexpect(bodyData.data).contains.something.like({firstName: 'Firnan'});\n//expect(bodyData.data.length).to.equal(0);",
              "err": {},
              "uuid": "020f44ed-eb37-425f-81c0-4467f27be9b5",
              "parentUUID": "f511ab4e-b37d-41ba-8d8d-a93388f78f8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@positive] Create user with valid request data",
              "fullTitle": "[@createuser] Create user API Test [@positive] Create user with valid request data",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const namaYgMauDiCari = 'Firnan';\n\n// const dataRequest = data.dataRequestAPIPostUser(namaYgMauDiCari);\nlet response =  await api.postUser(requestBody);\nlet bodyData = response.body;\nexpect(response.status).to.equal(200);\nexpect(bodyData.firstName).to.equal(namaYgMauDiCari);\nexpect(bodyData.id).not.to.be.null;\n\n// Additional Assertion\nresponse = await api.getUser(namaYgMauDiCari);\nbodyData = response.body;\nexpect(response.status).to.equal(200);\nfor(let index = 0; index < bodyData.data.length; index += 1) {\n    expect(bodyData.data[index].firstName.toLowerCase()).to.equal(namaYgMauDiCari.toLowerCase());\n}",
              "err": {},
              "uuid": "8582a5e3-e057-4d9c-93cf-081335757e50",
              "parentUUID": "f511ab4e-b37d-41ba-8d8d-a93388f78f8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "020f44ed-eb37-425f-81c0-4467f27be9b5",
            "8582a5e3-e057-4d9c-93cf-081335757e50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}