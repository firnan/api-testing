{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-19T16:51:21.375Z",
    "end": "2022-08-19T16:51:21.490Z",
    "duration": 115,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2f1ce123-1a0c-4161-a929-5d53d30477a1",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5adf512a-22a5-4f57-bea4-dcd91885aecf",
          "title": "Search user for API Test",
          "fullFile": "/Users/firnasholihuda/Documents/Mini Bootcamp QA Automation/task-week3/testcases/search-user.js",
          "file": "/testcases/search-user.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Search user for API Test\"",
              "fullTitle": "Search user for API Test \"before all\" hook in \"Search user for API Test\"",
              "timedOut": false,
              "duration": 54,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before hooks\");\nlet response = await api.postUser(requestBody);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "61ec3ebb-85f2-40b7-aded-0761511dc7f4",
              "parentUUID": "5adf512a-22a5-4f57-bea4-dcd91885aecf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Search user for API Test\"",
              "fullTitle": "Search user for API Test \"before each\" hook in \"Search user for API Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before each hooks\");",
              "err": {},
              "uuid": "81c02ff9-bd55-4df7-813c-27377b1a88e8",
              "parentUUID": "5adf512a-22a5-4f57-bea4-dcd91885aecf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Search user for API Test\"",
              "fullTitle": "Search user for API Test \"after all\" hook in \"Search user for API Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"after hooks\");",
              "err": {},
              "uuid": "53259cef-4788-4d6e-a7f0-c24efb2db524",
              "parentUUID": "5adf512a-22a5-4f57-bea4-dcd91885aecf",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Search user for API Test\"",
              "fullTitle": "Search user for API Test \"after each\" hook in \"Search user for API Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"after each hooks\");",
              "err": {},
              "uuid": "8a3cb2a0-8d69-4435-a807-8161708cdde3",
              "parentUUID": "5adf512a-22a5-4f57-bea4-dcd91885aecf",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@search-user-api] Verify get users API will return when using valid keyword",
              "fullTitle": "Search user for API Test [@search-user-api] Verify get users API will return when using valid keyword",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// starting for scripting\nlet namaYgMauDiCari = 'Firnan';\nlet response = await api.getUser(namaYgMauDiCari);\nlet bodyData = response.body;\nexpect(response.status).to.equal(200);\n//console.log(bodyData.data);\nexpect(bodyData.data).contains.something.like({firstName: 'Firnan'});\n//expect(bodyData.data.length).to.equal(0);",
              "err": {},
              "uuid": "eece5690-4645-4ba8-a74c-3c43e3a461a3",
              "parentUUID": "5adf512a-22a5-4f57-bea4-dcd91885aecf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eece5690-4645-4ba8-a74c-3c43e3a461a3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
          "title": "Update user for API Test",
          "fullFile": "/Users/firnasholihuda/Documents/Mini Bootcamp QA Automation/task-week3/testcases/update-user.js",
          "file": "/testcases/update-user.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Update user for API Test\"",
              "fullTitle": "Update user for API Test \"before all\" hook in \"Update user for API Test\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before hooks\");\nlet response = await api.postUser(requestBody);\nexpect(response.status).to.equal(200);",
              "err": {},
              "uuid": "ffaaff54-3adb-46c4-9df3-39d16f432b19",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Update user for API Test\"",
              "fullTitle": "Update user for API Test \"before each\" hook in \"Update user for API Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"before each hooks\");",
              "err": {},
              "uuid": "d794a7d8-236b-4366-9f48-db53ec9804a6",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Update user for API Test\"",
              "fullTitle": "Update user for API Test \"after all\" hook in \"Update user for API Test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"after hooks\");\n//let response = await api.deleteUser(requestBody);\n//expect(response.status).to.equal(200);",
              "err": {},
              "uuid": "e7c8f32d-c2f8-46cc-a681-7e29119abecf",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Update user for API Test\"",
              "fullTitle": "Update user for API Test \"after each\" hook in \"Update user for API Test\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(\"after each hooks\");",
              "err": {},
              "uuid": "ac5b342d-c5a7-43f8-9939-99daa7309627",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[@update] Update Ocuppation and Nationality user with valid data",
              "fullTitle": "Update user for API Test [@update] Update Ocuppation and Nationality user with valid data",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const occupationCheck = 'QA Engineer'\nconst nationalityCheck = 'Indonesia'\n//let oku = (requestBody.occupation = 'OKII')\nlet response = await api.putUser(requestBody);\nlet bodyData = response.body;\n\n//console.log(bodyData) \nexpect(response.status).to.equal(200);\nexpect(bodyData.id).not.to.be.null;\nexpect(response.body).to.be.contain({occupation: occupationCheck});\nexpect(response.body).to.be.contain({nationality: nationalityCheck});\nexpect(response.body).has.jsonSchema(jsonSchema);",
              "err": {},
              "uuid": "1c4827d7-fa78-4c47-a9df-87e745b9c6a1",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@updatehobi] Update Hobbies into empty array will return 400",
              "fullTitle": "Update user for API Test [@updatehobi] Update Hobbies into empty array will return 400",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//const idUser = '2ed60d6e-1534-4f67-8a26-1a06ed892092';\nconst hobi = '';\nlet response = await api.putUser(requestBody3);\nlet bodyData = response.body;\n//console.log(bodyData);\nfor(let index = 0; index < bodyData.data; index += 1) {\nexpect(response.status).to.equal(400);\nexpect(response.body).to.be.contain({message: 'you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender'});\nexpect(response.body).to.be.contain({errorCode: 'ER-03'});\n//expect(response.body.hobbies.length).to.equal(0);\n//expect(response.body).has.jsonSchema(jsonSchema);\n}",
              "err": {},
              "uuid": "4b4fca8a-0b7e-49b8-afbd-bbb316b55cce",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@updateage]Update Age into 0 will return 400",
              "fullTitle": "Update user for API Test [@updateage]Update Age into 0 will return 400",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ageUser = '0';\nlet response = await api.putUser(requestBody2);\nlet bodyData = response.body;\nfor(let index = 0; index < bodyData.data; index += 1) {\nexpect(response.status).to.equal(400);\nexpect(response.body).to.be.contain({message: 'you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender'});\nexpect(response.body).to.be.contain({errorCode: 'ER-03'});\n}",
              "err": {},
              "uuid": "ee236328-1f32-4722-bdf2-a19074548fa0",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[@updateid] Update ID into null will return 404",
              "fullTitle": "Update user for API Test [@updateid] Update ID into null will return 404",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const idUser = null;\nlet response = await api.putUser(requestBody4);\nlet bodyData = response.body;\nfor(let index = 0; index < bodyData.data; index += 1) {\n    expect(response.status).to.equal(404);\n    expect(bodyData.data[3]).to.equal(idUser);\n    expect(response.body).to.be.contain({message: 'user not found'});\n    expect(response.body).to.be.contain({errorCode: 'ER-01'});\n}",
              "err": {},
              "uuid": "3236538a-966c-44a8-a159-a3380ae76c71",
              "parentUUID": "e6e6be84-1670-41c8-96ea-f85c0bc3c37c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c4827d7-fa78-4c47-a9df-87e745b9c6a1",
            "4b4fca8a-0b7e-49b8-afbd-bbb316b55cce",
            "ee236328-1f32-4722-bdf2-a19074548fa0",
            "3236538a-966c-44a8-a159-a3380ae76c71"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 26,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}